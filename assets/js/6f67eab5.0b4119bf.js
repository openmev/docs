"use strict";(self.webpackChunkopenmev_docs=self.webpackChunkopenmev_docs||[]).push([[151],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>s});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),s=r,k=u["".concat(d,".").concat(s)]||u[s]||m[s]||i;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(3117),r=(n(7294),n(3905));const i={title:"eth_getUncleByBlockNumberAndIndex",version:2022.04,tags:["json rpc","gateway","api"]},l=void 0,o={unversionedId:"rpc/eth_getUncleByBlockNumberAndIndex",id:"rpc/eth_getUncleByBlockNumberAndIndex",title:"eth_getUncleByBlockNumberAndIndex",description:"eth_getUncleByBlockNumberAndIndex",source:"@site/docs/rpc/eth_getUncleByBlockNumberAndIndex.md",sourceDirName:"rpc",slug:"/rpc/eth_getUncleByBlockNumberAndIndex",permalink:"/rpc/eth_getUncleByBlockNumberAndIndex",editUrl:"https://github.com/openmev/docs/edit/main/docs/rpc/eth_getUncleByBlockNumberAndIndex.md",tags:[{label:"json rpc",permalink:"/tags/json-rpc"},{label:"gateway",permalink:"/tags/gateway"},{label:"api",permalink:"/tags/api"}],version:"current",frontMatter:{title:"eth_getUncleByBlockNumberAndIndex",version:2022.04,tags:["json rpc","gateway","api"]},sidebar:"tutorialSidebar",previous:{title:"eth_getUncleByBlockHashAndIndex",permalink:"/rpc/eth_getUncleByBlockHashAndIndex"}},d={},p=[{value:"eth_getUncleByBlockNumberAndIndex",id:"eth_getunclebyblocknumberandindex",level:4},{value:"Description",id:"description",level:5},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns",level:5},{value:"Example",id:"example",level:5}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"eth_getunclebyblocknumberandindex"},"eth_getUncleByBlockNumberAndIndex"),(0,r.kt)("h5",{id:"description"},"Description"),(0,r.kt)("p",null,"Returns information about an uncle specified by block number and uncle index position"),(0,r.kt)("h5",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"#"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"{",(0,r.kt)("a",{parentName:"td",href:"#quantity"},(0,r.kt)("inlineCode",{parentName:"a"},"Quantity")),"|",(0,r.kt)("inlineCode",{parentName:"td"},"string"),"}"),(0,r.kt)("td",{parentName:"tr",align:null},"block number, or one of ",(0,r.kt)("inlineCode",{parentName:"td"},'"latest"'),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"earliest"')," or ",(0,r.kt)("inlineCode",{parentName:"td"},'"pending"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"{",(0,r.kt)("a",{parentName:"td",href:"#quantity"},(0,r.kt)("inlineCode",{parentName:"a"},"Quantity")),"}"),(0,r.kt)("td",{parentName:"tr",align:null},"index of uncle")))),(0,r.kt)("h5",{id:"returns"},"Returns"),(0,r.kt)("p",null,"{",(0,r.kt)("inlineCode",{parentName:"p"},"null|object"),"} - ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," if no block or uncle is found, otherwise an uncle object with the following members:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#data"},(0,r.kt)("inlineCode",{parentName:"a"},"Data")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"extraData"),' - "extra data" field of this block'),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#data"},(0,r.kt)("inlineCode",{parentName:"a"},"Data")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"hash")," - block hash or ",(0,r.kt)("inlineCode",{parentName:"li"},"null")," if pending"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#data"},(0,r.kt)("inlineCode",{parentName:"a"},"Data")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"logsBloom")," - logs bloom filter or ",(0,r.kt)("inlineCode",{parentName:"li"},"null")," if pending"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#data"},(0,r.kt)("inlineCode",{parentName:"a"},"Data")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"miner")," - address that received this block's mining rewards"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#data"},(0,r.kt)("inlineCode",{parentName:"a"},"Data")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"nonce")," - proof-of-work hash or ",(0,r.kt)("inlineCode",{parentName:"li"},"null")," if pending"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#data"},(0,r.kt)("inlineCode",{parentName:"a"},"Data")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"parentHash")," - parent block hash"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#data"},(0,r.kt)("inlineCode",{parentName:"a"},"Data")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"receiptsRoot")," -root of the this block's receipts trie"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#data"},(0,r.kt)("inlineCode",{parentName:"a"},"Data")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"sha3Uncles")," - SHA3 of the uncles data in this block"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#data"},(0,r.kt)("inlineCode",{parentName:"a"},"Data")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"stateRoot")," - root of this block's final state trie"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#data"},(0,r.kt)("inlineCode",{parentName:"a"},"Data")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"transactionsRoot")," - root of this block's transaction trie"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#quantity"},(0,r.kt)("inlineCode",{parentName:"a"},"Quantity")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"difficulty")," - difficulty for this block"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#quantity"},(0,r.kt)("inlineCode",{parentName:"a"},"Quantity")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"gasLimit")," - maximum gas allowed in this block"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#quantity"},(0,r.kt)("inlineCode",{parentName:"a"},"Quantity")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"gasUsed")," - total used gas by all transactions in this block"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#quantity"},(0,r.kt)("inlineCode",{parentName:"a"},"Quantity")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," - block number or ",(0,r.kt)("inlineCode",{parentName:"li"},"null")," if pending"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#quantity"},(0,r.kt)("inlineCode",{parentName:"a"},"Quantity")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"size")," - size of this block in bytes"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#quantity"},(0,r.kt)("inlineCode",{parentName:"a"},"Quantity")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"timestamp")," - unix timestamp of when this block was collated"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("a",{parentName:"li",href:"#quantity"},(0,r.kt)("inlineCode",{parentName:"a"},"Quantity")),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"totalDifficulty")," - total difficulty of the chain until this block"),(0,r.kt)("li",{parentName:"ul"},"{",(0,r.kt)("inlineCode",{parentName:"li"},"Array<Transaction>"),"} ",(0,r.kt)("inlineCode",{parentName:"li"},"uncles")," - list of uncle hashes")),(0,r.kt)("h5",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'# Request\ncurl -X POST --data \'{\n    "id": 1337,\n    "jsonrpc": "2.0",\n    "method": "eth_getUncleByBlockNumberAndIndex",\n    "params": ["0x29c", "0x0"]\n}\' <url>\n\n# Response\n{\n    "id": 1337,\n    "jsonrpc": "2.0",\n    "result": {\n        "difficulty": "0x027f07",\n        "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000",\n        "gasLimit": "0x9f759",\n        "gasUsed": "0x9f759",\n        "hash": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",\n        "logsBloom": "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331",\n        "miner": "0x4e65fda2159562a496f9f3522f89122a3088497a",\n        "nonce": "0xe04d296d2460cfb8472af2c5fd05b5a214109c25688d3704aed5484f9a7792f2",\n        "number": "0x1b4",\n        "parentHash": "0x9646252be9520f6e71339a8df9c55e4d7619deeb018d2a3f2d21fc165dde5eb5",\n        "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",\n        "size":  "0x027f07",\n        "stateRoot": "0xd5855eb08b3387c0af375e9cdb6acfc05eb8f519e419b874b6ff2ffda7ed1dff",\n        "timestamp": "0x54e34e8e"\n        "totalDifficulty":  "0x027f07",\n        "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",\n        "uncles": []\n    }\n}\n')))}m.isMDXComponent=!0}}]);