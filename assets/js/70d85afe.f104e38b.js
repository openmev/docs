"use strict";(self.webpackChunkopenmev_docs=self.webpackChunkopenmev_docs||[]).push([[844],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>m});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(r),m=i,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return r?t.createElement(g,c(c({ref:n},p),{},{components:r})):t.createElement(g,c({ref:n},p))}));function m(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,c=new Array(a);c[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,c[1]=o;for(var l=2;l<a;l++)c[l]=r[l];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9396:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var t=r(3117),i=(r(7294),r(3905));const a={sidebar_position:2,title:"Gas Pricing API"},c=void 0,o={unversionedId:"guides/gas-pricing",id:"guides/gas-pricing",title:"Gas Pricing API",description:"api.txprice.com",source:"@site/docs/guides/gas-pricing.md",sourceDirName:"guides",slug:"/guides/gas-pricing",permalink:"/guides/gas-pricing",editUrl:"https://github.com/openmev/docs/edit/main/docs/guides/gas-pricing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Gas Pricing API"},sidebar:"tutorialSidebar",previous:{title:"Chain Reorgs and Errors",permalink:"/technical-reference/chain-errors"},next:{title:"MEV Bundles",permalink:"/guides/creating-bundles"}},s={},l=[{value:"<code>api.txprice.com</code>",id:"apitxpricecom",level:2},{value:"Usage",id:"usage",level:3},{value:"Get Ethereum Transaction Pricing",id:"get-ethereum-transaction-pricing",level:4},{value:"Get Pricing at 95% confidence interval",id:"get-pricing-at-95-confidence-interval",level:4},{value:"OpenAPI",id:"openapi",level:2},{value:"Response",id:"response",level:5}],p={toc:l};function u(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"apitxpricecom"},(0,i.kt)("inlineCode",{parentName:"h2"},"api.txprice.com")),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("h4",{id:"get-ethereum-transaction-pricing"},"Get Ethereum Transaction Pricing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -L api.txprice.com\n")),(0,i.kt)("h4",{id:"get-pricing-at-95-confidence-interval"},"Get Pricing at 95% confidence interval"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl -s -L api.txprice.com | jq .blockPrices[0].estimatedPrices[1]\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "confidence": 95,\n  "price": 107,\n  "maxPriorityFeePerGas": 2.52,\n  "maxFeePerGas": 212.92\n}\n')),(0,i.kt)("h2",{id:"openapi"},"OpenAPI"),(0,i.kt)("p",null,"Returns a range of confidence intervals for gas prices needed to qualify a transaction for inclusion in the next block.\nOrder of confidence intervals is subject to change."),(0,i.kt)("h5",{id:"response"},"Response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "system": "ethereum",\n  "network": "main",\n  "unit": "gwei",\n  "maxPrice": 123,\n  "currentBlockNumber": 13005095,\n  "msSinceLastBlock": 3793,\n  "blockPrices": [\n    {\n      "blockNumber": 13005096,\n      "baseFeePerGas": 94.647990462,\n      "estimatedTransactionCount": 137,\n      "estimatedPrices": [\n        // json.blockPrices[0].estimatedPrices[0]\n        {\n          "confidence": 99, // json.blockPrices[0].estimatedPrices[0].confidence\n          "price": 104, // json.blockPrices[0].estimatedPrices[0].price\n          "maxPriorityFeePerGas": 9.86, // json.blockPrices[0].estimatedPrices[0].maxFeePerGas\n          "maxFeePerGas": 199.16 // json.blockPrices[0].estimatedPrices[0].maxFeePerGas\n        },\n        {\n          "confidence": 95,\n          "price": 99,\n          "maxPriorityFeePerGas": 5.06,\n          "maxFeePerGas": 194.35\n        },\n        {\n          "confidence": 90,\n          "price": 98,\n          "maxPriorityFeePerGas": 4.16,\n          "maxFeePerGas": 193.45\n        },\n        {\n          "confidence": 80,\n          "price": 97,\n          "maxPriorityFeePerGas": 2.97,\n          "maxFeePerGas": 192.27\n        },\n        {\n          "confidence": 70,\n          "price": 96,\n          "maxPriorityFeePerGas": 1.74,\n          "maxFeePerGas": 191.04\n        }\n      ]\n    }\n  ]\n}\n')))}u.isMDXComponent=!0}}]);